%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/tyrusberry/Downloads/full_data.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2020/03/27 20:27:38

%% Initialize variables.
filename = 'full_data.csv';
delimiter = ',';
startRow = 2;

%% Format for each line of text:
%   column1: datetimes (%{yyyy-MM-dd}D)
%	column2: categorical (%C)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%{yyyy-MM-dd}D%C%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'EmptyValue', 0.0, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
fulldata = table(dataArray{1:end-1}, 'VariableNames', {'date','location','new_cases','new_deaths','total_cases','total_deaths'});

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% fulldata.date=datenum(fulldata.date);

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

Data = zeros(size(fulldata));
[a,b,Data(:,2)] = unique(fulldata(:,2));

for i=1:size(fulldata,1)
    Data(i,1) = datenum(fulldata{i,1});
end

Data(:,3:6) = fulldata{:,3:6};
DataMatrix = Data;


for i = 1:size(a,1)
    if (a{i,1}=='United States')
        break;
    end
end

fulldata(Data(:,2)==i,:)

Cases = Data(Data(:,2)==i,5);
Deaths = Data(Data(:,2)==i,6);

Cases = Cases(22:end);
Deaths = Deaths(22:end);


%save AllData.mat fulldata DataMatrix;


% sums = zeros(100,1);
% counts = zeros(100,1);
% sums2 = zeros(100,1);
% counts2 = zeros(100,1);
% 
% for i = 1:length(b)-1
%     if (max(Data(Data(:,2)==i,5))>1000)
%         figure(1);
%         plot(Data(Data(:,2)==i & Data(:,5)>100,5),'k');hold on;
%         temp = Data(Data(:,2)==i & Data(:,5)>100,5);
%         l=length(temp);
%         sums(1:l) = sums(1:l) + temp;
%         counts(1:l) = counts(1:l) + 1;
%         figure(2)
%         plot(Data(Data(:,2)==i & Data(:,5)>100,6),'r');hold on;
%         temp = Data(Data(:,2)==i & Data(:,5)>100,6);
%         l=length(temp);
%         sums2(1:l) = sums2(1:l) + temp;
%         counts2(1:l) = counts2(1:l) + 1;
%     end
% end
% figure(1)
% plot(sums./counts,'k','linewidth',3);
% figure(2);
% plot(sums2./counts2,'r','linewidth',3);

